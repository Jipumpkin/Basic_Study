package 백준자바;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {

    public static void main(String[] args) throws IOException {
        
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        // 구간 합 구하기 11659번
        
        // 첫재줄에 숫자의 개수 N과 합을 구해야 하는 횟수 M이 공백을 구분으로 주어진다
        StringTokenizer NandM = new StringTokenizer(bf.readLine(), " ");
        
        // 공백을 기준으로 N과 M을 나누고 변수에 저장한다.
        int N = Integer.parseInt(NandM.nextToken());
        int M = Integer.parseInt(NandM.nextToken());
        
        // 둘째줄에 숫자들이 공백을 기준으로 주어진다
        StringTokenizer numStr = new StringTokenizer(bf.readLine(), " ");
        
 
        // 숫자를 담을 배열을 크기를 정해서 선언한다
        int[] numli = new int[N];
        
        
        // 처음 숫자부터 차례로 n번째 구간까지의 합을 저장할 배열을 선언한다.
//        int[] sum = new int[N+1];
        // 배열의 크기를 N+1로 설정하는 이유는 아래 반복문에서 sum배열을 채울때 다음 인덱스의 값부터 채워나가야 하므로 1만큼 더 크게 선언한다.
        // 그렇지않으면 반복문이 i+1번째 요소를 채우려고할때 인덱스를 넘어서는 값을 채우려고 시도하게된다.
        // 해당 방식을 사용하면 반복문을 하나 더 줄일수 있으나 이해를 위해 이 코드에서는 배열의 첫번째값을 미리 채우는 방식을 사용한다.
        
        int[] sum = new int[N];
 
        
        
        // 반복문을 통해 int 리스트를 채운다.
        for(int i = 0; i<N; i++) {
        	numli[i] = Integer.parseInt(numStr.nextToken());
        	// 카운트토큰은 넥스트토큰을 실행하면서 줄어들기때문에 반복문 조건에 넣어선 안된다.
        }
        
        // sum배열의 첫번째 값은 numli[0]으로 설정한다.
        // 첫 구간합은 numli[0]의 값과 동일하기 때문이다.
        sum[0] = numli[0];
        		
        
        // 반복문을 통해 구간합 배열 sum을 채운다.
        for(int i = 0; i<N; i++) {
        	sum[i+1] = sum[i] + numli[i];
        	if(i+1 == N-1) { // 길이를 넘어가는 인덱스를 참조하려할때 break 한다. 비효율적인 방식이나 이해를 위해 사용
        		break;
        	}
        }
        
        System.out.println(sum[2]);

        
        // 셋째줄부터는 더할 구간의 범위를 공백을 기준으로 M줄에 걸쳐 주어진다.
        for(int i = 0; i<M; i++) {
        	
            // 공백을 기준으로 나누어 슬라이싱 범위를 입력받는다.
        	StringTokenizer iStr = new StringTokenizer(bf.readLine(), " ");
            
            // 숫자로 변환
            int start = Integer.parseInt(iStr.nextToken());
            int end = Integer.parseInt(iStr.nextToken());
            
            int result = sum[end-1] - sum[start-1];
            
            bw.write(result+"\n");   // 데이터를 버퍼에 저장
            bw.flush();   // 버퍼의 데이터를 모두 출력
            
            
        }
        
        bw.close();   //스트림을 닫음
        // BufferedReader 닫기
        bf.close();
    }
}
