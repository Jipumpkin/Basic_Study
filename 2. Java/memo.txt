변수
연산자
식

항의 개수를 기준으로 3가지로 나눠진다.
1)단항연산자 - 증감연산자 ++ --
앞 - 연산을 먼저 진행하고 실행코드를 동작시킨다
뒤 - 실행코드가 동작하고나서 연산을 진행

2)이항연산자
- 산술연산자
 + : 문자열 연산도 가능하다
     숫자와 문자의 연산을 진행 할 떄는 숫자를 자동으로 문자열 형변환을 한다.
"
- 비교연산자
결과값으로 boolean자료형만 돌려준다

-  논리연산자
피연산자 자리에 boolean자료형만 올수잇다
: 결과값으로 boolean만 돌려준다



- 비트, 시프트연산자



3)삼항연산자
-조건연산자
(조건식)?(실행문1):(실행문2)



제어문
1) 조건문 ⁭if ifelse elseif switch - case




제어문 - 조건문
제어문 : 컴파일러의 방향을 개발자가 원하는데로 제어할 수 있도록 도와주는 문법

- 조건문 : 조건식의 결과에 따라 코드를 실행시킨ㄴ 문법
* 조건식 : 결과갑으로 boolean 자료형을 갖는 식

1) 단순 if문
2) if-else문
3) if-if else문
4) switch-case문
switch(식, 변수, 값){
case 값1 :
        값과 값1이 같으면 실행시킬 코드
        break;
        // switch문을 빠져나가는 키워드.
default :
        모든 case를 만족하지 않을 때 실행시킬 코드




for문은 반복문의 일종
반복 횟수가 정해져있을 경우에 사용하느 ㄴ문법


       시작점      도착점     보폭
for(초기화 구문; 조건식; 반복후 작업) {
        조건식이 true일동안 실행시킬 코드
}






















반복문

: 명령을 내린 코드를 반복하고 싶을 떄 사용하는 문법

- for 문
for(초기화 구문; 조건식; 반복후 작업)
-3가지 조건은 세미콜론; 으로 구분 한다.

for(int i = 1; i < 3; i++){ syso(i) }
실행 순서 
1 2 4 3 2 4 3 2 4 3 ~~~ 2(false) 5(break)

종료조건
조건식이 false거나 break를 만나면 탈출





- while
: 반복 횟수가 정해져 있지 않을 때 사용하는 반복문법

while(조건식){
        조건식이 true일 동안 실행시킬 코드
}


- 탈출조건
1) while키워드 옆에 조건식을 사용해서 종료조건 ( 무적권 {}안 코드를 다 실행하게됨 )
2) 무한반복(true)를 돌려놓고 {}안에서 break



- do while












배열
같은 자료형의 데이터들을 하나의 묶음으로 관리하기 위한 자료구조

배열 선언 및 생성
자료형[] 배열명 = new 자료형[배열의크기];
배열명 주소값
배열의 인덱스값을 통해 접근을 해야 실제 저장되어 있는데이터를 확인할수 있다

정적, 동적 ....

자료구조
대량의 데이터를 관리하기위한 메커니즘
-stack queue list tree array
array : 같은 데이터타입의 데이터를 관리하기위한 자료구조

배열을 선언 및 생성
자료형[] 배열명 = new 자료형[배열으 크기];
생성할때 정해져야하고 한번 정하면 바꿀수없다.

+인덱스에 상응하는 구조를 가지고 있다.
String[] names = new String[5];
syso(names) ---> 주소값이 출력됨
5칸짜리 배열이 동적 메모리 어디에 만들어져있는지에 대한 값

기본데이터 타입은 정적인 메모리에 저장
레퍼런스형 데이터 타입은 동적인 메모리에 저장
인덱스는 0부터 시작한다
ex 5를 선언하면 0부터 4까지 가진다



[ 배열 ] array
같은 자료형의 데이터들을 관리 할 수 있도록 도와주는 자료구조

1) 배열을 선언 및 생성

자료형[] 배열명 = new 자료형[배열의 크기];

자료형 - 저장하고싶은 데이터타입
[] - 배열
배열명 - 레퍼런스형 변수명(주소값)
+ 배열의 크기를 한번 정해놓으면 뒤쪽에서 바꿀수 없다
+ 배열은 인덱스에 상응하는 구조를 가지고있다.
+ 레퍼런스형 변수 : 주소값을 참조하는 변수


- 배열에 없는 인덱스에 접근하면 
ArrayIndexOutOfBoundException

+배열의 크기
배열명.length --> for문 조건식






메서드는 함수임

메서드 -> OOP


main 밖
public : 접근제한자
static : 저장소
데이터타입, void : 리턴타입
--> 메서드를 통해 얻는 결과값(리턴값)의 데이터 타입
메서드명(호출명)

(매개변수) --> 모든 메서드들은 소괄호를 가짐
매개변수 : 메서드 안에서 사용되는 변수로써 선언단만 작성
{} : 메서드 body(로직을 담는곳)
로직 안쪽으로 return
1)값을 호출한 곳으로 반환
2) 메서드 종료
리턴타입에 데이터 타입이 명시되어있으면 return 필수
void는 생략가능

사용(실행)
호출명(전달인자)
전달인자==매개변수
개수,데이터타입,순서

- 오버로딩(중복정의)
: 같은 클래스 내에서 같은 이름의 메서드를 만들 수 있다.
단, 매개변수의 형태가 달라야 한다.
(데이터타입, 매개변수의 개수,  순서)





생성자의 특징

생성자는 메서드임
기본생성자는 생략됨
생성자의 이름과 클래스 이름은 완전히 같아야함(대소문자구분)
매개변수를 갖는 생성자 생성시 기본생성자는 비활성화됨(오버로딩하면 사용가능)





















